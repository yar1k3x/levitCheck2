{"ast":null,"code":"#!/usr/bin/env node\nimport { InvalidArgumentError } from \"commander\";\nimport { Command } from \"commander\";\n// import pkg from \"./package.json\" assert { type: \"json\" }\n\nimport fs from \"fs/promises\";\nimport { join } from \"path\";\nimport { fileURLToPath } from \"url\";\nconst __dirname = fileURLToPath(new URL(\".\", import.meta.url));\nconst pkg = JSON.parse(await fs.readFile(join(__dirname, \"./package.json\")));\nconst {\n  name,\n  description,\n  version\n} = pkg;\ntry {\n  // TODO: Remove when Node.js 18 is not maintained anymore\n  globalThis.crypto ??= (await import(\"crypto\")).webcrypto;\n} catch {}\n\n/** Web compatible method to create a random string of a given length */\nexport function randomString(size = 32) {\n  const bytes = crypto.getRandomValues(new Uint8Array(size));\n  return Buffer.from(bytes, \"base64\").toString(\"base64\");\n}\nconst program = new Command();\nprogram.name(name).description(description).version(version);\nprogram.command(\"secret\").option(\"--raw\", \"Output the string without any formatting.\").description(\"Generate a random string.\").action(options => {\n  const value = randomString();\n  if (options.raw) return console.log(value);\n  // TODO: Detect framework, check for existing value, and write automatically\n  console.log(`\nSecret generated. Copy it to your .env/.env.local file (depending on your framework):\n\nAUTH_SECRET=${value}`);\n});\n\n// TODO: Get this programmatically\nconst frameworks = {\n  nextjs: {\n    src: \"https://github.com/nextauthjs/next-auth-example\",\n    demo: \"https://next-auth-example.vercel.app\"\n  },\n  sveltekit: {\n    src: \"https://github.com/nextauthjs/sveltekit-auth-example\",\n    demo: \"https://sveltekit-auth-example.vercel.app\"\n  },\n  express: {\n    src: \"https://github.com/nextauthjs/express-auth-example\",\n    demo: \"https://express-auth-example.vercel.app\"\n  }\n};\nprogram.command(\"framework\").argument(\"[framework]\", \"The framework to use.\", value => {\n  if (!value) return value;\n  if (Object.keys(frameworks).includes(value)) return value;\n  throw new InvalidArgumentError(`Valid frameworks are: ${supportedFrameworks.join(\", \")}`);\n}).description(\"Clone a framework template.\").action(framework => {\n  if (!framework) {\n    return console.log(`\nSupported frameworks are: ${Object.keys(frameworks).join(\", \")}`);\n  }\n  const {\n    src,\n    demo\n  } = frameworks[framework];\n  console.log(`\nSource code: ${src}\nDeployed demo: ${demo}`);\n});\nprogram.parse(process.argv);","map":{"version":3,"names":["InvalidArgumentError","Command","fs","join","fileURLToPath","__dirname","URL","import","meta","url","pkg","JSON","parse","readFile","name","description","version","globalThis","crypto","webcrypto","randomString","size","bytes","getRandomValues","Uint8Array","Buffer","from","toString","program","command","option","action","options","value","raw","console","log","frameworks","nextjs","src","demo","sveltekit","express","argument","Object","keys","includes","supportedFrameworks","framework","process","argv"],"sources":["/Users/a1/new app/frontend/node_modules/auth/index.js"],"sourcesContent":["#!/usr/bin/env node\n\nimport { InvalidArgumentError } from \"commander\"\nimport { Command } from \"commander\"\n// import pkg from \"./package.json\" assert { type: \"json\" }\n\nimport fs from \"fs/promises\"\nimport { join } from \"path\"\nimport { fileURLToPath } from \"url\"\nconst __dirname = fileURLToPath(new URL(\".\", import.meta.url))\nconst pkg = JSON.parse(await fs.readFile(join(__dirname, \"./package.json\")))\nconst { name, description, version } = pkg\n\ntry {\n  // TODO: Remove when Node.js 18 is not maintained anymore\n  globalThis.crypto ??= (await import(\"crypto\")).webcrypto\n} catch {}\n\n/** Web compatible method to create a random string of a given length */\nexport function randomString(size = 32) {\n  const bytes = crypto.getRandomValues(new Uint8Array(size))\n  return Buffer.from(bytes, \"base64\").toString(\"base64\")\n}\n\nconst program = new Command()\n\nprogram.name(name).description(description).version(version)\n\nprogram\n  .command(\"secret\")\n  .option(\"--raw\", \"Output the string without any formatting.\")\n  .description(\"Generate a random string.\")\n  .action((options) => {\n    const value = randomString()\n    if (options.raw) return console.log(value)\n    // TODO: Detect framework, check for existing value, and write automatically\n    console.log(`\nSecret generated. Copy it to your .env/.env.local file (depending on your framework):\n\nAUTH_SECRET=${value}`)\n  })\n\n// TODO: Get this programmatically\nconst frameworks = {\n  nextjs: {\n    src: \"https://github.com/nextauthjs/next-auth-example\",\n    demo: \"https://next-auth-example.vercel.app\",\n  },\n  sveltekit: {\n    src: \"https://github.com/nextauthjs/sveltekit-auth-example\",\n    demo: \"https://sveltekit-auth-example.vercel.app\",\n  },\n  express: {\n    src: \"https://github.com/nextauthjs/express-auth-example\",\n    demo: \"https://express-auth-example.vercel.app\",\n  },\n}\n\nprogram\n  .command(\"framework\")\n  .argument(\"[framework]\", \"The framework to use.\", (value) => {\n    if (!value) return value\n    if (Object.keys(frameworks).includes(value)) return value\n    throw new InvalidArgumentError(\n      `Valid frameworks are: ${supportedFrameworks.join(\", \")}`\n    )\n  })\n  .description(\"Clone a framework template.\")\n  .action((framework) => {\n    if (!framework) {\n      return console.log(`\nSupported frameworks are: ${Object.keys(frameworks).join(\", \")}`)\n    }\n    const { src, demo } = frameworks[framework]\n    console.log(`\nSource code: ${src}\nDeployed demo: ${demo}`)\n  })\n\nprogram.parse(process.argv)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}